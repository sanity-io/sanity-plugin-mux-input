/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  video: MuxVideo
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote'
        listItem?: 'bullet'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
  >
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Slug = {
  _type: 'slug'
  current: string
  source?: string
}

export type MuxVideo = {
  _type: 'mux.video'
  asset?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'mux.videoAsset'
  }
}

export type MuxVideoAsset = {
  _id: string
  _type: 'mux.videoAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  status?: string
  assetId?: string
  playbackId?: string
  filename?: string
  thumbTime?: number
  data?: MuxAssetData
}

export type MuxAssetData = {
  _type: 'mux.assetData'
  resolution_tier?: string
  upload_id?: string
  created_at?: string
  id?: string
  status?: string
  max_stored_resolution?: string
  passthrough?: string
  encoding_tier?: string
  master_access?: string
  aspect_ratio?: string
  duration?: number
  max_stored_frame_rate?: number
  mp4_support?: string
  max_resolution_tier?: string
  tracks?: Array<
    {
      _key: string
    } & MuxTrack
  >
  playback_ids?: Array<
    {
      _key: string
    } & MuxPlaybackId
  >
  static_renditions?: MuxStaticRenditions
}

export type MuxStaticRenditions = {
  _type: 'mux.staticRenditions'
  status?: string
  files?: Array<
    {
      _key: string
    } & MuxStaticRenditionFile
  >
}

export type MuxStaticRenditionFile = {
  _type: 'mux.staticRenditionFile'
  ext?: string
  name?: string
  width?: number
  bitrate?: number
  filesize?: number
  height?: number
}

export type MuxPlaybackId = {
  _type: 'mux.playbackId'
  id?: string
  policy?: string
}

export type MuxTrack = {
  _type: 'mux.track'
  id?: string
  type?: string
  max_width?: number
  max_frame_rate?: number
  duration?: number
  max_height?: number
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Post
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | MuxVideo
  | MuxVideoAsset
  | MuxAssetData
  | MuxStaticRenditions
  | MuxStaticRenditionFile
  | MuxPlaybackId
  | MuxTrack
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/app/page.tsx
// Variable: postsQuery
// Query: *[_type == "post" && defined(slug.current)]{_id,title,slug,}
export type PostsQueryResult = Array<{
  _id: string
  title: string
  slug: Slug
}>

// Source: ./src/app/posts/[[...slug]]/page.tsx
// Variable: postQuery
// Query: *[_type == "post" && slug.current == $slug][0]{...,"va": video.asset,"video": video.asset->{  playbackId}}
export type PostQueryResult = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title: string
  slug: Slug
  video: {
    playbackId: string | null
  } | null
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'normal'
        listItem?: 'bullet'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
      }
  >
  va: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'mux.videoAsset'
  } | null
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "post" && defined(slug.current)]{\n_id,\ntitle,\nslug,\n}': PostsQueryResult
    '*[_type == "post" && slug.current == $slug][0]{\n...,\n"va": video.asset,\n"video": video.asset->{\n  playbackId\n}\n}': PostQueryResult
  }
}
